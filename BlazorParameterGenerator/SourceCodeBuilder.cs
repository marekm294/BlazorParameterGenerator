using BlazorParameterGenerator.Models;
using System;
using System.Collections.Generic;
using System.Linq;

namespace BlazorParameterGenerator;

internal sealed class SourceCodeBuilder
{
    private string? _namespace;
    private string? _modifiers;
    private string? _className;
    private bool _shouldOverrideMethod;
    private List<CustomPropertyInfo> _customPropertyInfos = [];

    public SourceCodeBuilder AddUsings()
    {
        return this;
    }

    public SourceCodeBuilder AddNamespace(string namespaceValue)
    {
        _namespace = namespaceValue;
        return this;
    }

    public SourceCodeBuilder AddClass(
        IEnumerable<string> modifiers,
        string className)
    {
        _modifiers = string.Join(" ", modifiers);
        _className = className;
        return this;
    }

    public SourceCodeBuilder AddMethodContent(List<CustomPropertyInfo> customPropertyInfos)
    {
        _customPropertyInfos = customPropertyInfos;
        _shouldOverrideMethod = _customPropertyInfos.Any();
        return this;
    }

    public override string ToString()
    {
        return $@"// This code is generated by SetParameterGenerator
using Microsoft.AspNetCore.Components;

namespace {_namespace}
{{
    {_modifiers} class {_className}
    {{
        {GetMethodSourceCode()}
    }}
}}";
    }

    public string GetMethodSourceCode()
    {
        if (_shouldOverrideMethod is false)
        {
            return "";
        }

        return $@"public override Task SetParametersAsync(ParameterView parameters)
        {{
            foreach (var parameter in parameters)
            {{
                {GetSwitchSourceCode()}
            }}

            return base.SetParametersAsync(ParameterView.Empty);
        }}";
    }

    private string GetSwitchSourceCode()
    {
        return $@"switch (parameter.Name)
                {{
                    {GetCaseSourceCodes()}
                    default:
                        throw new ArgumentException($""Unknown parameter: {{parameter.Name}}"");
                }}";
    }

    private string GetCaseSourceCodes()
    {
        var caseStatements = _customPropertyInfos
            .Select(p => $@"case nameof({p.PropertyName}):
                        {p.PropertyName} = ({p.PropertyType})parameter.Value;
                        break;
                    ");

        return string.Join("", caseStatements).TrimEnd();
    }
}